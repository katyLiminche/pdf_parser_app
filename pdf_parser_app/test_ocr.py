#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ OCR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.insert(0, str(Path(__file__).parent / "app"))

def test_ocr_processor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
    
    try:
        from pipeline.ocr_processor import OCRProcessor
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OCR
        ocr = OCRProcessor(['ru', 'en'])
        
        if ocr.reader is None:
            print("‚ùå OCR –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        print("‚úÖ OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        test_text = "–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É ‚Ññ123 –æ—Ç 01.01.2025"
        doc_type = ocr.detect_document_type(test_text)
        print(f"üìÑ –¢–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: {doc_type}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        validation = ocr.validate_extracted_data(test_text, [])
        print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è: {validation}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OCR: {e}")
        return False

def test_enhanced_extractor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞...")
    
    try:
        from pipeline.enhanced_extractor import EnhancedExtractor
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
        extractor = EnhancedExtractor(use_ocr=True)
        
        if extractor.ocr_processor is None:
            print("‚ö†Ô∏è OCR –æ—Ç–∫–ª—é—á–µ–Ω –≤ —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–µ")
        else:
            print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä —Å OCR —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞: {e}")
        return False

def test_with_sample_pdf():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å —Ä–µ–∞–ª—å–Ω—ã–º PDF —Ñ–∞–π–ª–æ–º"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º PDF...")
    
    # –ò—â–µ–º PDF —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ inbox
    inbox_path = Path("inbox")
    pdf_files = list(inbox_path.glob("*.pdf"))
    
    if not pdf_files:
        print("‚ö†Ô∏è PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ inbox")
        return False
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π PDF —Ñ–∞–π–ª
    test_pdf = pdf_files[0]
    print(f"üìÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª: {test_pdf.name}")
    
    try:
        from pipeline.enhanced_extractor import EnhancedExtractor
        
        extractor = EnhancedExtractor(use_ocr=True)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Ç–∞–±–ª–∏—Ü—ã
        text, tables, info = extractor.extract_text_and_tables(str(test_pdf))
        
        print(f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–æ —Å–∏–º–≤–æ–ª–æ–≤: {len(text)}")
        print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: {len(tables)}")
        print(f"üîç OCR –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω: {info.get('ocr_used', False)}")
        
        if info.get('ocr_used'):
            ocr_info = info.get('ocr_enhancements', {})
            print(f"üîç OCR —É–ª—É—á—à–µ–Ω–∏—è: {ocr_info}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—é–º–µ
        summary = extractor.get_extraction_summary(info)
        print(f"\nüìã –†–µ–∑—é–º–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:\n{summary}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ OCR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏\n")
    
    # –¢–µ—Å—Ç 1: OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
    test1_passed = test_ocr_processor()
    
    # –¢–µ—Å—Ç 2: –£–ª—É—á—à–µ–Ω–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
    test2_passed = test_enhanced_extractor()
    
    # –¢–µ—Å—Ç 3: –†–µ–∞–ª—å–Ω—ã–π PDF
    test3_passed = test_with_sample_pdf()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "="*50)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print(f"OCR –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä: {'‚úÖ' if test1_passed else '‚ùå'}")
    print(f"–£–ª—É—á—à–µ–Ω–Ω—ã–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä: {'‚úÖ' if test2_passed else '‚ùå'}")
    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ PDF: {'‚úÖ' if test3_passed else '‚ùå'}")
    
    if all([test1_passed, test2_passed, test3_passed]):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("OCR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

if __name__ == "__main__":
    main()
