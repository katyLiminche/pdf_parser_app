#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ GUI —Å OCR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.insert(0, str(Path(__file__).parent / "app"))

def test_ocr_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é OCR –≤ GUI"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OCR –≤ GUI...")
    
    try:
        from app.gui.main_window import MainWindow
        from app.utils.config import AppConfig
        
        print("‚úÖ GUI –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = AppConfig()
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞...")
        # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: QApplication –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –ø–µ—Ä–µ–¥ MainWindow
        # –≠—Ç–æ —Ç–µ—Å—Ç —Ç–æ–ª—å–∫–æ –∏–º–ø–æ—Ä—Ç–∞ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        
        print("‚úÖ OCR –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤ GUI —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GUI —Å OCR: {e}")
        return False

def test_enhanced_parser():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å OCR"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞ —Å OCR...")
    
    try:
        from app.pipeline.universal_parser import UniversalParser
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞ —Å OCR
        parser = UniversalParser(use_ocr=True, ocr_languages=['ru', 'en'])
        print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Å OCR —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å OCR
        status = parser.get_ocr_status()
        print(f"üìä –°—Ç–∞—Ç—É—Å OCR: {status}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ OCR
        success = parser.toggle_ocr(False)
        print(f"üîÑ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ OCR: {'–£—Å–ø–µ—à–Ω–æ' if success else '–û—à–∏–±–∫–∞'}")
        
        success = parser.toggle_ocr(True)
        print(f"üîÑ –í–∫–ª—é—á–µ–Ω–∏–µ OCR: {'–£—Å–ø–µ—à–Ω–æ' if success else '–û—à–∏–±–∫–∞'}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞: {e}")
        return False

def test_processing_thread():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å OCR"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å OCR...")
    
    try:
        from app.gui.main_window import ProcessingThread
        from app.utils.config import AppConfig
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = AppConfig()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        thread = ProcessingThread("test.pdf", config, use_ocr=True)
        print("‚úÖ –ü–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å OCR —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
        print(f"üìä OCR –≤–∫–ª—é—á–µ–Ω: {thread.use_ocr}")
        print(f"üìä –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {thread.pdf_path}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return False

def test_ocr_language_support():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É —è–∑—ã–∫–æ–≤ OCR"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —è–∑—ã–∫–æ–≤ OCR...")
    
    try:
        from app.pipeline.ocr_processor import OCRProcessor
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —è–∑—ã–∫–æ–≤
        languages_combinations = [
            ['ru'],
            ['en'],
            ['ru', 'en'],
            ['en', 'ru']
        ]
        
        for langs in languages_combinations:
            try:
                ocr = OCRProcessor(languages=langs)
                print(f"‚úÖ OCR —Å —è–∑—ã–∫–∞–º–∏ {langs}: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            except Exception as e:
                print(f"‚ùå OCR —Å —è–∑—ã–∫–∞–º–∏ {langs}: –æ—à–∏–±–∫–∞ - {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —è–∑—ã–∫–æ–≤ OCR: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ GUI —Å OCR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é\n")
    
    # –¢–µ—Å—Ç 1: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è OCR –≤ GUI
    test1_passed = test_ocr_integration()
    
    # –¢–µ—Å—Ç 2: –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä
    test2_passed = test_enhanced_parser()
    
    # –¢–µ—Å—Ç 3: –ü–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    test3_passed = test_processing_thread()
    
    # –¢–µ—Å—Ç 4: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —è–∑—ã–∫–æ–≤
    test4_passed = test_ocr_language_support()
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø GUI –° OCR:")
    print(f"–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è OCR –≤ GUI: {'‚úÖ' if test1_passed else '‚ùå'}")
    print(f"–£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä: {'‚úÖ' if test2_passed else '‚ùå'}")
    print(f"–ü–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {'‚úÖ' if test3_passed else '‚ùå'}")
    print(f"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —è–∑—ã–∫–æ–≤: {'‚úÖ' if test4_passed else '‚ùå'}")
    
    if all([test1_passed, test2_passed, test3_passed, test4_passed]):
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print("GUI —Å OCR —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        print("\nüí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ GUI –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("   python app/main.py")
    else:
        print("\n‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")

if __name__ == "__main__":
    main()
