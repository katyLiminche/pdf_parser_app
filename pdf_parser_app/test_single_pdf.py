#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç OCR –Ω–∞ –æ–¥–Ω–æ–º PDF —Ñ–∞–π–ª–µ
"""

import sys
import os
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.insert(0, str(Path(__file__).parent / "app"))

def test_single_pdf(pdf_path: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç OCR –Ω–∞ –æ–¥–Ω–æ–º PDF —Ñ–∞–π–ª–µ"""
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR –Ω–∞ —Ñ–∞–π–ª–µ: {Path(pdf_path).name}")
    print("=" * 60)
    
    try:
        from app.pipeline.universal_parser import UniversalParser
        
        # –¢–µ—Å—Ç 1: –ë–µ–∑ OCR
        print("üìä –¢–ï–°–¢ –ë–ï–ó OCR:")
        start_time = time.time()
        
        parser_no_ocr = UniversalParser(use_ocr=False)
        result_no_ocr = parser_no_ocr.parse_pdf_file(pdf_path, enable_ocr=False)
        
        time_no_ocr = time.time() - start_time
        
        if 'error' in result_no_ocr:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±–µ–∑ OCR: {result_no_ocr['error']}")
        else:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –±–µ–∑ OCR –∑–∞ {time_no_ocr:.2f} —Å–µ–∫")
            print(f"   –°–∏–º–≤–æ–ª–æ–≤: {result_no_ocr.get('extraction_info', {}).get('total_chars', 0):,}")
            print(f"   –¢–∞–±–ª–∏—Ü: {result_no_ocr.get('extraction_info', {}).get('tables_found', 0)}")
            print(f"   –ü–æ–∑–∏—Ü–∏–π: {len(result_no_ocr.get('best_items', []))}")
        
        print("\n" + "-" * 40)
        
        # –¢–µ—Å—Ç 2: –° OCR
        print("üìä –¢–ï–°–¢ –° OCR:")
        start_time = time.time()
        
        parser_with_ocr = UniversalParser(use_ocr=True, ocr_languages=['ru', 'en'])
        result_with_ocr = parser_with_ocr.parse_pdf_file(pdf_path, enable_ocr=True)
        
        time_with_ocr = time.time() - start_time
        
        if 'error' in result_with_ocr:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å OCR: {result_with_ocr['error']}")
        else:
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —Å OCR –∑–∞ {time_with_ocr:.2f} —Å–µ–∫")
            print(f"   –°–∏–º–≤–æ–ª–æ–≤: {result_with_ocr.get('extraction_info', {}).get('total_chars', 0):,}")
            print(f"   –¢–∞–±–ª–∏—Ü: {result_with_ocr.get('extraction_info', {}).get('tables_found', 0)}")
            print(f"   –ü–æ–∑–∏—Ü–∏–π: {len(result_with_ocr.get('best_items', []))}")
            
            # OCR –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            ocr_info = result_with_ocr.get('ocr_info', {})
            if ocr_info and ocr_info.get('ocr_additions', 0) > 0:
                print(f"   OCR —É–ª—É—á—à–µ–Ω–∏—è: +{ocr_info['ocr_additions']} —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤")
                print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {ocr_info.get('images_processed', 0)}")
            
            # –ö–∞—á–µ—Å—Ç–≤–æ
            quality = result_with_ocr.get('extraction_quality', {})
            if quality:
                print(f"   –û–±—â–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {quality.get('overall_quality', 0):.1%}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ
        print("\nüìà –°–†–ê–í–ù–ï–ù–ò–ï:")
        if 'error' not in result_no_ocr and 'error' not in result_with_ocr:
            chars_no_ocr = result_no_ocr.get('extraction_info', {}).get('total_chars', 0)
            chars_with_ocr = result_with_ocr.get('extraction_info', {}).get('total_chars', 0)
            
            print(f"   –°–∏–º–≤–æ–ª–æ–≤ –±–µ–∑ OCR: {chars_no_ocr:,}")
            print(f"   –°–∏–º–≤–æ–ª–æ–≤ —Å OCR: {chars_with_ocr:,}")
            print(f"   –†–∞–∑–Ω–∏—Ü–∞: {chars_with_ocr - chars_no_ocr:+,}")
            
            print(f"   –í—Ä–µ–º—è –±–µ–∑ OCR: {time_no_ocr:.2f} —Å–µ–∫")
            print(f"   –í—Ä–µ–º—è —Å OCR: {time_with_ocr:.2f} —Å–µ–∫")
            print(f"   –†–∞–∑–Ω–∏—Ü–∞: {time_with_ocr - time_no_ocr:+.2f} —Å–µ–∫")
            
            if time_with_ocr > time_no_ocr:
                print(f"   OCR –∑–∞–º–µ–¥–ª–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ {time_with_ocr/time_no_ocr:.1f} —Ä–∞–∑")
            else:
                print(f"   OCR —É—Å–∫–æ—Ä–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –≤ {time_no_ocr/time_with_ocr:.1f} —Ä–∞–∑")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ PDF —Ñ–∞–π–ª–æ–≤ –∏–∑ inbox
    inbox_path = Path("inbox")
    pdf_files = list(inbox_path.glob("*.pdf"))
    
    if not pdf_files:
        print("‚ùå PDF —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ inbox")
        return
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(pdf_files)} PDF —Ñ–∞–π–ª–æ–≤:")
    for i, pdf_file in enumerate(pdf_files, 1):
        size_kb = pdf_file.stat().st_size / 1024
        print(f"   {i}. {pdf_file.name} ({size_kb:.1f} KB)")
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω–¥–µ–∫—Å)
    test_index = 4  # –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞ 0, 1, 2 –∏–ª–∏ 3 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    test_file = pdf_files[test_index - 1]
    
    print(f"\nüöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ OCR –Ω–∞ —Ñ–∞–π–ª–µ: {test_file.name}")
    print(f"üìÅ –ü—É—Ç—å: {test_file}")
    print(f"üìè –†–∞–∑–º–µ—Ä: {test_file.stat().st_size / 1024:.1f} KB")
    
    success = test_single_pdf(str(test_file))
    
    if success:
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏")

if __name__ == "__main__":
    main()
